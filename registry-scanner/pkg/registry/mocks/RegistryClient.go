// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	distribution "github.com/distribution/distribution/v3"
	digest "github.com/opencontainers/go-digest"

	mock "github.com/stretchr/testify/mock"

	options "github.com/argoproj-labs/argocd-image-updater/registry-scanner/pkg/options"

	tag "github.com/argoproj-labs/argocd-image-updater/registry-scanner/pkg/tag"
)

// RegistryClient is an autogenerated mock type for the RegistryClient type
type RegistryClient struct {
	mock.Mock
}

// ManifestForDigest provides a mock function with given fields: ctx, dgst
func (_m *RegistryClient) ManifestForDigest(ctx context.Context, dgst digest.Digest) (distribution.Manifest, error) {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for ManifestForDigest")
	}

	var r0 distribution.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) (distribution.Manifest, error)); ok {
		return rf(ctx, dgst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) distribution.Manifest); ok {
		r0 = rf(ctx, dgst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dgst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManifestForTag provides a mock function with given fields: ctx, tagStr
func (_m *RegistryClient) ManifestForTag(ctx context.Context, tagStr string) (distribution.Manifest, error) {
	ret := _m.Called(ctx, tagStr)

	if len(ret) == 0 {
		panic("no return value specified for ManifestForTag")
	}

	var r0 distribution.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (distribution.Manifest, error)); ok {
		return rf(ctx, tagStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) distribution.Manifest); ok {
		r0 = rf(ctx, tagStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tagStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository provides a mock function with given fields: nameInRepository
func (_m *RegistryClient) NewRepository(nameInRepository string) error {
	ret := _m.Called(nameInRepository)

	if len(ret) == 0 {
		panic("no return value specified for NewRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nameInRepository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagMetadata provides a mock function with given fields: ctx, manifest, opts
func (_m *RegistryClient) TagMetadata(ctx context.Context, manifest distribution.Manifest, opts *options.ManifestOptions) (*tag.TagInfo, error) {
	ret := _m.Called(ctx, manifest, opts)

	if len(ret) == 0 {
		panic("no return value specified for TagMetadata")
	}

	var r0 *tag.TagInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, distribution.Manifest, *options.ManifestOptions) (*tag.TagInfo, error)); ok {
		return rf(ctx, manifest, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, distribution.Manifest, *options.ManifestOptions) *tag.TagInfo); ok {
		r0 = rf(ctx, manifest, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tag.TagInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, distribution.Manifest, *options.ManifestOptions) error); ok {
		r1 = rf(ctx, manifest, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tags provides a mock function with given fields: ctx
func (_m *RegistryClient) Tags(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Tags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRegistryClient creates a new instance of RegistryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryClient {
	mock := &RegistryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

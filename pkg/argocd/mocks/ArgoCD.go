// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	application "github.com/argoproj/argo-cd/v2/pkg/apiclient/application"
	applicationv1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/argoproj-labs/argocd-image-updater/pkg/types"

	v1alpha1 "github.com/argoproj-labs/argocd-image-updater/api/v1alpha1"
)

// ArgoCD is an autogenerated mock type for the ArgoCD type
type ArgoCD struct {
	mock.Mock
}

// FilterApplicationsForUpdate provides a mock function with given fields: ctx, iuCR
func (_m *ArgoCD) FilterApplicationsForUpdate(ctx context.Context, iuCR *v1alpha1.ImageUpdater) (map[string]types.ApplicationImages, error) {
	ret := _m.Called(ctx, iuCR)

	if len(ret) == 0 {
		panic("no return value specified for FilterApplicationsForUpdate")
	}

	var r0 map[string]types.ApplicationImages
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ImageUpdater) (map[string]types.ApplicationImages, error)); ok {
		return rf(ctx, iuCR)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ImageUpdater) map[string]types.ApplicationImages); ok {
		r0 = rf(ctx, iuCR)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]types.ApplicationImages)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.ImageUpdater) error); ok {
		r1 = rf(ctx, iuCR)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, appNamespace, appName
func (_m *ArgoCD) GetApplication(ctx context.Context, appNamespace string, appName string) (*applicationv1alpha1.Application, error) {
	ret := _m.Called(ctx, appNamespace, appName)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *applicationv1alpha1.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*applicationv1alpha1.Application, error)); ok {
		return rf(ctx, appNamespace, appName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *applicationv1alpha1.Application); ok {
		r0 = rf(ctx, appNamespace, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationv1alpha1.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appNamespace, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, iuCR
func (_m *ArgoCD) ListApplications(ctx context.Context, iuCR *v1alpha1.ImageUpdater) ([]applicationv1alpha1.Application, error) {
	ret := _m.Called(ctx, iuCR)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 []applicationv1alpha1.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ImageUpdater) ([]applicationv1alpha1.Application, error)); ok {
		return rf(ctx, iuCR)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ImageUpdater) []applicationv1alpha1.Application); ok {
		r0 = rf(ctx, iuCR)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]applicationv1alpha1.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.ImageUpdater) error); ok {
		r1 = rf(ctx, iuCR)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSpec provides a mock function with given fields: ctx, spec
func (_m *ArgoCD) UpdateSpec(ctx context.Context, spec *application.ApplicationUpdateSpecRequest) (*applicationv1alpha1.ApplicationSpec, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSpec")
	}

	var r0 *applicationv1alpha1.ApplicationSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *application.ApplicationUpdateSpecRequest) (*applicationv1alpha1.ApplicationSpec, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *application.ApplicationUpdateSpecRequest) *applicationv1alpha1.ApplicationSpec); ok {
		r0 = rf(ctx, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationv1alpha1.ApplicationSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *application.ApplicationUpdateSpecRequest) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArgoCD creates a new instance of ArgoCD. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArgoCD(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArgoCD {
	mock := &ArgoCD{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
